/* @canonical/generator-ds 0.10.0-experimental.2 */

.ds.link {
  &.soft {
    /*
            Soft links are explicitly meant to use normal text color
            TODO because <a> tag have their color set in the styles package, we need to set a specific color here.
                Otherwise, we could use `currentColor` or only apply link color to non-soft links, which would allow the link to inherit color from parent.
                We should confirm this approach is what we want.
        */
    color: var(--tmp-color-text-default);

    &:hover {
      color: var(--tmp-color-text-link-default);
    }

    &:visited {
      color: var(--tmp-color-text-default);
    }

    &[aria-current="page"] {
      font-weight: var(--link-soft-selected-font-weight);
    }
  }

  &:hover,
  &:focus-visible,
  &:focus {
    & .activation-contents {
      visibility: visible;
    }
  }

  & .activation-contents {
    color: var(--tmp-color-text-default);
    display: inline-block;
    padding: 0 var(--link-activation-contents-padding-horizontal);
    text-decoration: none;
    vertical-align: baseline;
    visibility: hidden;

    /*     TODO I used a child element to allow the user to pass arbitrary content to be rendered on interaction, but this has the unintended consequence of affecting the intrinsic size of the parent link element which is visible in its focus outline
          Another way of doing this might be to use a Portal
          Vanilla handles this with a pseudoelement (which uses a hard-coded icon), which works well, but has the downside of being less flexible for arbitrary content
          Need to do some field research and see what the best approach is, but I'm welcome to opinions
          */
    /*
        max-height: 100%;
      overflow: visible;

  */
  }
}
