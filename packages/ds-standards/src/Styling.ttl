@prefix : <http://example.org/codestandards#> .
@prefix cs: <http://example.org/codestandards#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# Styling Category
:StylingCategory a cs:Category ;
    rdfs:label "Styling"@en ;
    rdfs:comment "Standards specific to CSS styling and design system implementation"@en .

# CSS Variables Standard
:CSSVariables a cs:CodeStandard ;
    cs:name "styling/css/variables" ;
    cs:hasCategory :StylingCategory ;
    cs:description "CSS variables should follow a clear scoping and naming pattern: global design tokens use semantic names, component variables define component-specific tokens, modifier variables use intent-based naming, and variables should have fallbacks for resilience." ;
    cs:dos """
(Do) Use semantic names and clear hierarchy for CSS variables:
```css
/* Global design tokens */
:root {
  --color-background-default: #fff;
  --color-text-default: #000;
  --color-border-high-contrast: rgba(0, 0, 0, 0.85);
  --dimension-separator-bar-thickness: 2px;
}

/* Component-specific variables */
.ds.rule {
  --rule-color-background: var(--color-border-high-contrast);
  --rule-height: 1px;
  --rule-margin-top: 1rem;
}

/* Intent-based modifier variables */
.highlighted {
  --intent-separator-bar-height: var(--dimension-separator-bar-thickness);
  --intent-separator-bar-color: var(--color-text-default);
}
```
""" ;
    cs:donts """
(Don't) Use non-semantic names, skip fallbacks, or mix scopes:
```css
:root {
  --gray-100: #f8f9fa;
  --space-4: 1rem;
}
.ds.rule {
  height: var(--rule-height);
}
.highlighted {
  --rule-height: 2px;
}
.ds.rule {
  --color-border-default: #000;
}
```
""" .

# CSS Selector Standard
:CSSSelectors a cs:CodeStandard ;
    cs:name "styling/css/selectors" ;
    cs:hasCategory :StylingCategory ;
    cs:description """CSS selectors should follow a consistent pattern:
- Use namespace prefix for component root
- Keep selectors flat and specific
- Avoid deep nesting
- Use semantic class names""" ;
    cs:dos """# Proper selector patterns
```css
/* Component root with namespace */
.ds.button {
  /* Base styles */
}

/* Direct child selectors when needed */
.ds.button > .icon {
  margin-right: var(--button-icon-spacing);
}

/* State modifiers */
.ds.button[disabled] {
  opacity: var(--button-disabled-opacity);
}

/* Semantic modifier classes */
.ds.button.primary {
  --intent-color: var(--color-primary);
}
```

This approach:
- Maintains clear scope
- Prevents style leaks
- Keeps specificity manageable""" ;
    cs:donts """# Problematic selector patterns
```css
/* Don't use deep nesting */
.ds.card .content .title h2 {  /* Bad: Too specific */
  color: var(--color-text-default);
}

/* Don't use non-semantic selectors */
.ds.button.big {  /* Bad: Use modifier system instead */
  padding: 1rem;
}

/* Don't rely on HTML structure */
.ds.list li > span {  /* Bad: Coupled to markup */
  color: var(--color-text-muted);
}

/* Don't use high specificity selectors */
.ds.button.primary[type="submit"].large {  /* Bad: Too specific */
  /* styles */
}
```

These patterns:
- Create brittle styles
- Increase specificity problems
- Make maintenance difficult""" .

# Component Naming Convention for CSS
:CSSComponentNamingConvention a cs:CodeStandard ;
    cs:name "styling/css/selectors/component-naming-convention" ;
    cs:hasCategory :StylingCategory ;
    cs:description "Component CSS class names must be the kebab-case version of the component's PascalCase name. This ensures a consistent and predictable mapping from component name to CSS class." ;
    cs:dos """
(Do) Convert PascalCase component names to kebab-case for CSS classes:
- `MyComponent` -> `.ds.my-component`
- `UserProfile` -> `.ds.user-profile`
- `Button` -> `.ds.button`
""" ;
    cs:donts """
(Don't) Use PascalCase or other formats in CSS class names:
- `.ds.MyComponent` (Bad: Not kebab-case)
- `.ds.user_profile` (Bad: Not kebab-case)
""" .
