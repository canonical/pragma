@prefix cso: <http://pragma.canonical.com/codestandards#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# Styling Category
cs:StylingCategory a cso:Category ;
    rdfs:label "Styling"@en ;
    rdfs:comment "Standards for implementing design system styling patterns"@en ;
    cso:slug "styling" .

cs:TokenTypes a cso:CodeStandard ;
    cso:name "styling/tokens/types" ;
    cso:hasCategory cs:StylingCategory ;
    cso:description """Design tokens follow a strict hierarchy:
      - Primitive tokens: Raw values that form the foundation of the design system
      - Semantic tokens: Map semantic concepts to primitive token values
      - Component tokens: Map component properties to semantic token values
    """ ;
    cso:dos """
(Do) Define semantic tokens that map to primitive tokens.
```
{
  "color": {
    "background": {
      "default": {
        "$type": "color",
        "$value": "{color.neutral.100}"
      }
    }
  }
}
```
""" ;
    cso:donts """
(Don't) Skip the semantic layer by mapping component tokens directly to primitives.
```
{
  "button": {
    "padding": {
      "vertical": {
        "$type": "dimension",
        "$value": "{spacing.unit}"  # Should reference semantic token like {spacing.vertical.medium}
      }
    }
  }
}
```
""" ;

# Design Token Creation Standard
cs:DesignTokenCreation a cso:CodeStandard ;
    cso:name "styling/tokens/creation" ;
    cso:hasCategory cs:StylingCategory ;
    cso:description """Design tokens must be created for all design decisions in a component. See css/properties/values for how these tokens are used in CSS implementation.""" ;
    cso:dos """
(Do) Create component tokens that reference semantic tokens for design decisions.
```
{
  "button": {
    "background": {
      "$type": "color",
        "$value": "{color.background.primary}"
    }
  }
}
```
""" ;
    cso:donts """
(Don't) Use raw values for design decisions.
```
{
  "button": {
    "background": {
      "$type": "color",
        "$value": "#0066CC"  # Should reference semantic token like {color.background.primary}
    }
  }
}
```
""" ;

# Theme Definition Standard
cs:ThemeDefinition a cso:CodeStandard ;
    cso:name "styling/themes/definition" ;
    cso:hasCategory cs:StylingCategory ;
    cso:description """Themes are collections of semantic tokens that provide consistent styling across components. See css/themes/activation for implementation details.""" ;
    cso:dos """
(Do) Define a theme as a complete set of semantic tokens.
```
{
  "theme": {
    "canonical": {
      "color": {
        "background": {
          "default": {
            "$type": "color",
        "$value": "{color.neutral.100}"
          }
        }
      }
    }
  }
}
```
""" ;
    cso:donts """
(Don't) Mix implementation details into theme definitions.
```
{
  "theme": {
    "canonical": {
      "class": "canonical",     // Bad: CSS implementation detail
      "container": "div",       // Bad: HTML implementation detail
    }
  }
}
```
""" .

# Token Scoping Standard
cs:TokenScoping a cso:CodeStandard ;
    cso:name "styling/tokens/scoping" ;
    cso:hasCategory cs:StylingCategory ;
    cso:description """Design tokens must be scoped according to their type:
- Primitive tokens: Global scope (system-wide base values)
- Semantic tokens: Theme scope (theme-specific bindings to primitive tokens)
- Component tokens: Component scope (bindings to semantic tokens)
""" ;
    cso:dos """
(Do) Define primitive tokens in global scope.
```
{
  "color": {
    "neutral": {
      "100": {
        "$type": "color",
        "$value": "#FFFFFF"
      }
    }
  }
}
```
""" ;
    cso:donts """
(Don't) Define primitive tokens in theme scope.
```
{
  "theme": {
    "canonical": {
      "color": {
        "neutral": {
          "100": {
            "$type": "color",
        "$value": "#FFFFFF"  # Should be defined in global scope
          }
        }
      }
    }
  }
}
```
""" .

