@prefix : <http://pragma.canonical.com/codestandards#> .
@prefix cs: <http://pragma.canonical.com/codestandards#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# General Code Category
:CodeCategory a cs:Category ;
    rdfs:label "Code"@en ;
    rdfs:comment "General coding standards and best practices"@en .

# Function Purity Standard
:FunctionPurity a cs:CodeStandard ;
    cs:name "code/function/purity" ;
    cs:hasCategory :CodeCategory ;
    cs:description "Functions must be pure. A pure function shall return the same output for the same input and shall not modify external state or perform I/O operations." ;
    cs:dos """
(Do) Create pure functions that rely only on their inputs to compute the output.
```typescript
const calculatePrice = (basePrice: number, taxRate: number): number => {
  return basePrice * (1 + taxRate);
};
```
""" ;
    cs:donts """
(Don't) Create impure functions that modify external state or have side effects.
```typescript
let total = 0;
const addToTotal = (value: number) => {
  total += value; // Modifies external state
};
```
""" .

# Function Composition Standard
:FunctionComposition a cs:CodeStandard ;
    cs:name "code/function/composition" ;
    cs:hasCategory :CodeCategory ;
    cs:description "Each function must handle exactly one specific task. Complex operations must be broken down into smaller, single-purpose functions." ;
    cs:dos """
(Do) Define functions with a single, clear responsibility.
```typescript
const validateEmail = (email: string): boolean => {
  return /^[^@]+@[^@]+\.[^@]+$/.test(email);
};
```

(Do) Compose single-purpose functions to build complex logic.
```typescript
const validatePassword = (password: string): boolean => {
  return password.length >= 8;
};

const validateForm = (email: string, password:string): boolean => {
  return validateEmail(email) && validatePassword(password);
};
```
""" ;
    cs:donts """
(Don't) Mix multiple responsibilities in a single function.
```typescript
const processUserData = (user: any) => {
  // Validates user data
  // Transforms the data
  // Saves to the database
  // Sends a notification
};
```
""" .

# Function Colocation Standard
:FunctionColocation a cs:CodeStandard ;
    cs:name "code/function/colocation" ;
    cs:hasCategory :CodeCategory ;
    cs:description "Functions must be defined in the same file where they are used. Functions used by a single component must be defined within that component's file." ;
    cs:dos """
(Do) Place functions close to where they are used in your application logic.
```typescript
class UserService {
  private async validateUser(user: User): Promise<ValidationResult> {
    // Validation logic specific to UserService
  }

  async createUser(user: User): Promise<Result> {
    const validationResult = await this.validateUser(user);
    // ... creation logic
  }
}
```
""" ;
    cs:donts """
(Don't) Store functions in a generic 'utils' folder if they are only used in one place.
```
// utils/validators.ts
export const validateUser = (user: User) => { ... };

// services/UserService.ts
import { validateUser } from '../utils/validators'; // Less ideal if only used here
```
""" .

# API Stability Standard
:APIStability a cs:CodeStandard ;
    cs:name "code/api/stability" ;
    cs:hasCategory :CodeCategory ;
    cs:description "Unstable APIs must be marked with the @unstable JSDoc tag in type definition files. The tag must include a description of what is unstable." ;
    cs:dos """
(Do) Mark an unstable interface with a clear @unstable JSDoc tag and description.
```typescript
/**
 * Configuration for the data processing pipeline.
 * @unstable The streaming API is experimental and may change
 * in future releases. Currently, it only supports JSON data.
 */
interface PipelineConfig {
  // ...
}
```

(Do) Add an @unstable tag to a specific property with context about its instability.
```typescript
interface PipelineConfig {
  /**
   * @unstable The custom transformers API is in beta, and the interface
   * may change to support stronger type validation.
   */
  transformers?: DataTransformer[];
}
```

(Do) Describe the instability and any future plans for the API.
```typescript
interface CacheConfig {
  /**
   * @unstable The distributed cache API is experimental and will be
   * replaced with a new consensus-based implementation in v2.1.
   */
  distributed?: boolean;
}
```
""" ;
    cs:donts """
(Don't) Use the @unstable tag without an explanation.
```typescript
interface ProcessorConfig {
  /** @unstable */ // Bad: No context provided.
  streaming?: boolean;
}
```

(Don't) Use the @unstable tag without describing what is unstable.
```typescript
/**
 * @unstable // Bad: No description of what is unstable.
 */
interface QueueConfig {
  processor: (item: any) => Promise<void>;
}
```
""" .

:FileExportPattern a cs:CodeStandard ;
    cs:name "code/file-export-pattern" ;
    cs:hasCategory :CodeCategory ;
    cs:description "Files must use either a single default export or multiple named exports. Compound components must attach named exports as properties to the default export." ;
    cs:dos """
(Do) Use a single default export for files implementing a single component or function:
```typescript
// ComponentName.tsx
export default ComponentName;
```

(Do) Use multiple named exports for files providing a public API or a collection of related items:
```typescript
// index.ts
export { ComponentA, ComponentB };

// types.ts
export type TypeA = { ... };
export type TypeB = { ... };
```

(Do) Attach named exports to a default export for compound components:
```typescript
// Accordion.tsx
const Accordion = (props) => { /* ... */ };
Accordion.Item = AccordionItem; // Attaching a subcomponent
export default Accordion;
```
""" ;
    cs:donts """
(Don't) Mix default and unrelated named exports in a way that confuses the file's purpose:
```typescript
// Confusing: both default and a disconnected named export
export default ComponentName;
export const helper = () => {};
```

(Don't) Provide multiple unrelated exports from a file meant for a single domain:
```typescript
// Unrelated exports in one file
export default debounce;
export const throttle = () => {};
export const logger = () => {};
```
""" .

:NamedExportsTypeConsistency a cs:CodeStandard ;
    cs:name "code/named-exports-type-consistency" ;
    cs:hasCategory :CodeCategory ;
    cs:description "Files with named exports must expose a single export shape, except for index.ts files." ;
    cs:dos """
(Do) Export objects that share the same type from a file:
```typescript
export const myFuncA = (value: string) => {};
export const myFuncB = (value: string) => {};
export const myFuncC = (value: string) => {};
```
""" ;
    cs:donts """
(Don't) Export objects of different types or shapes from the same file:
```typescript
export const transformer = (value: string) => {};
export const reducer = (map: string[]) => {};
```

// Or mixing classes and functions
```typescript
export const transformer = (value: string) => {};
class ABC {}
export { ABC };
```
""" .

:NamedExportsReimport a cs:CodeStandard ;
    cs:name "code/named-exports-reimport" ;
    cs:hasCategory :CodeCategory ;
    cs:description "Module re-exports must use the 'export * as' pattern to preserve the module's namespace in index.ts files." ;
    cs:dos """
(Do) Use the 'export * as' pattern to re-export a module under a single namespace.
```typescript
// index.ts
export * as transformers from "./transformers.js";
```
""" ;
    cs:donts """
(Don't) Re-export all members of a module individually, as it flattens the namespace.
```typescript
// index.ts
export * from "./transformers.js"; // Flattens the namespace
```
""" .
