@prefix : <http://example.org/codestandards#> .
@prefix cs: <http://example.org/codestandards#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# Icons Category
:IconsCategory a cs:Category ;
    rdfs:label "Icons"@en ;
    rdfs:comment "Standards for icon development and implementation"@en .

# Icon File Storage Standard
:IconFileStorage a cs:CodeStandard ;
    cs:name "icons/file-storage" ;
    cs:hasCategory :IconsCategory ;
    cs:description "Each icon must be stored as a single SVG file in the icons directory." ;
    cs:dos """
(Do) Store each icon as a single SVG file in the icons directory:
```
icons/
  ├── warning.svg      # Single file per icon
  ├── search.svg
  └── github.svg
```
""" ;
    cs:donts """
(Don't) Use problematic storage patterns:
```
icons/
  ├── variants/        # Separate directories for variants
  │   └── warning-dark.svg
  ├── warning/         # Nested directories per icon
  │   └── index.svg
  └── warning.svg.txt  # Wrong file extension
```

(Don't) Store multiple icons in a single SVG file:
```
icons/
  └── all-icons.svg    # Bad: Multiple icons in one file
```
""" .

# Icon File Naming Standard
:IconFileNaming a cs:CodeStandard ;
    cs:name "icons/file-naming" ;
    cs:hasCategory :IconsCategory ;
    cs:description "Icon files must be named using kebab-case and end with the .svg extension. The name should be a semantic identifier for the icon." ;
    cs:dos """
(Do) Name icon files using kebab-case semantic identifiers:
```
warning.svg
user-profile.svg
arrow-down.svg
```
""" ;
    cs:donts """
(Don't) Use problematic naming patterns:
```
warning-16.svg    # Bad: Size in filename
warning-dark.svg  # Bad: Theme variant
warning_icon.svg  # Bad: Redundant 'icon' suffix
WARNING.svg       # Bad: Uppercase
```

(Don't) Use non-semantic or ambiguous names:
```
icon1.svg         # Bad: Not descriptive
shape.svg         # Bad: Not descriptive
```
""" .

# Icon Group Element Standard
:IconGroupElement a cs:CodeStandard ;
    cs:name "icons/group-element" ;
    cs:hasCategory :IconsCategory ;
    cs:description "Each icon SVG must contain a single <g> element with an id matching the icon's filename (without .svg)." ;
    cs:dos """
(Do) Use a single <g> element with a matching id in each SVG:
```svg
<!-- warning.svg -->
<svg>
  <g id="warning">
    <!-- icon paths -->
  </g>
</svg>
```
""" ;
    cs:donts """
(Don't) Use multiple <g> elements or mismatched ids:
```svg
<!-- warning.svg -->
<svg>
  <g id="icon-group">
    <!-- icon paths -->
  </g>
  <g id="warning-alt">
    <!-- alternate paths -->
  </g>
</svg>
```
""" .

# Icon ViewBox Standard
:IconViewBox a cs:CodeStandard ;
    cs:name "icons/viewbox" ;
    cs:hasCategory :IconsCategory ;
    cs:description "All icons must use a consistent 16x16 viewBox size." ;
    cs:dos """# Proper viewBox usage
```svg
<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'>
  <g id="icon">
    <!-- Icon content scaled to 16x16 -->
  </g>
</svg>
```
""" ;
    cs:donts """# Problematic viewBox patterns
```svg
<!-- Bad: Different viewBox size -->
<svg viewBox="0 0 24 24">
  <g id="icon">...</g>
</svg>

<!-- Bad: Non-square viewBox -->
<svg viewBox="0 0 16 24">
  <g id="icon">...</g>
</svg>

<!-- Bad: Missing viewBox -->
<svg width="16" height="16">
  <g id="icon">...</g>
</svg>
```
""" .

# Icon Color Usage Standard
:IconColorUsage a cs:CodeStandard ;
    cs:name "icons/color-usage" ;
    cs:hasCategory :IconsCategory ;
    cs:description "All non-branded icon paths must use currentColor for fill. Branded icons may use brand-specific colors." ;
    cs:dos """# Proper color usage
```svg
<!-- Non-branded icon -->
<svg viewBox="0 0 16 16">
  <g id="search">
    <path fill="currentColor" d="..." />
  </g>
</svg>

<!-- Branded icon -->
<svg viewBox="0 0 16 16">
  <g id="github">
    <path fill="currentColor" d="..." />
  </g>
</svg>
```
""" ;
    cs:donts """# Problematic color usage
```svg
<!-- Bad: Hard-coded colors -->
<path fill="#000000" d="..." />

<!-- Bad: Mixed color usage -->
<g>
  <path fill="currentColor" d="..." />
  <path fill="#cccccc" d="..." />
</g>

<!-- Bad: Opacity for variation -->
<path fill="currentColor" opacity="0.5" d="..." />
```
""" .

# Icon Variant Standard
:IconVariant a cs:CodeStandard ;
    cs:name "icons/variants" ;
    cs:hasCategory :IconsCategory ;
    cs:description "One icon file per icon concept - no size or theme variants. Sizing is handled by em units, theming by currentColor." ;
    cs:dos """# Proper variant handling
```svg
<!-- Single icon file -->
<svg viewBox="0 0 16 16">
  <g id="warning">
    <path fill="currentColor" d="..." />
  </g>
</svg>

/* CSS usage */
.small-icon { font-size: 1em; }
.large-icon { font-size: 2em; }
.warning-icon { color: var(--color-warning); }
```
""" ;
    cs:donts """# Problematic variant patterns
```
warning.svg          # Multiple files for
warning-small.svg    # different sizes
warning-large.svg

warning.svg          # Theme-specific
warning-dark.svg     # variants
warning-light.svg

/* Size-specific implementations */
.warning-16 { width: 16px; }
.warning-24 { width: 24px; }
```
""" .

# Icon Type Safety Standard
:IconTypeSafety a cs:CodeStandard ;
    cs:name "icons/type-safety" ;
    cs:hasCategory :IconsCategory ;
    cs:description "Icon names must be maintained in a type-safe constant array that generates the IconName type. The constant and type should be defined in the icon exporter package and imported by consumers." ;
    cs:dos """
(Do) Define the constant array and type in the icon exporter package, and import them in consumer code:
```typescript
// In the icon exporter package
export const ICON_NAMES = [
  "warning",
  "search",
  "github"
] as const;

export type IconName = typeof ICON_NAMES[number];

// In consumer code
import { IconName } from '@your-icons-package';

interface IconProps {
  name: IconName;
}
```
""" ;
    cs:donts """
(Don't) Define icon name types or values on the consumer side, or duplicate them:
```typescript
// Bad: String literal type defined in consumer code
// This should be imported from the icon exporter package
// Consumer code:
type IconName = "warning" | "search";

// Bad: Generic string type
// No type safety for icon names
// Consumer code:
type IconName = string;

// Bad: Separate type and values, or manual duplication
// This creates maintenance issues and should be avoided
const ICONS = ["warning", "search"];
type IconName = "warning" | "search";
```
""" .
